author: Michael Haag, Splunk
datamodel:
- Endpoint
date: '2021-03-01'
description: 'Fodhelper.exe has a known UAC bypass as it attempts to look for specific
  registry keys upon execution, that do not exist. Therefore, an attacker can write
  its malicious commands in these registry keys to be executed by fodhelper.exe with
  the highest privilege. \

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command`\

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute`\

  1. `HKCU:\Software\Classes\ms-settings\shell\open\command\(default)`\

  Upon triage, fodhelper.exe will have a child process and read access will occur
  on the registry keys. Isolate the endpoint and review parallel processes for additional
  behavior.'
how_to_implement: To successfully implement this search you need to be ingesting information
  on process that include the name of the process responsible for the changes from
  your endpoints into the `Endpoint` datamodel in the `Processes` node.
id: 909f8fd8-7ac8-11eb-a1f3-acde48001122
known_false_positives: Limited to no false positives are expected.
name: FodHelper UAC Bypass
references:
- https://blog.malwarebytes.com/malwarebytes-news/2021/02/lazyscripter-from-empire-to-double-rat/
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1548.002/T1548.002.md
- https://github.com/gushmazuko/WinBypass/blob/master/FodhelperBypass.ps1
- https://attack.mitre.org/techniques/T1548/002
search: '| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time)
  as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=fodhelper.exe
  by Processes.dest Processes.user Processes.parent_process Processes.process_name
  Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)`
  | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `fodhelper_uac_bypass_filter`'
tags:
  analytic_story:
  - Windows Defense Evasion Tactics
  - IcedID
  automated_detection_testing: passed
  confidence: 90
  context:
  - Source:Endpoint
  - Stage:Privilege Escalation
  dataset:
  - https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1548.002/atomic_red_team/windows-sysmon.log
  impact: 90
  kill_chain_phases:
  - Exploitation
  - Privilege Escalation
  message: Suspcious registy keys added by process fodhelper.exe (process_id- $process_id),
    with a parent_process of $parent_process_name$ that has been executed on $dest$
    by $user$.
  mitre_attack_id:
  - T1112
  - T1548.002
  - T1548
  observable:
  - name: user
    role:
    - Victim
    type: User
  - name: dest
    role:
    - Victim
    type: Endpoint
  - name: parent_process_name
    role:
    - Parent Process
    - Attacker
    type: Process Name
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - Endpoint.Processes.dest
  - Endpoint.Processes.parent_process
  - Endpoint.Processes.parent_process_id
  - Endpoint.Processes.parent_process_name
  - Endpoint.Processes.process
  - Endpoint.Processes.process_id
  - Endpoint.Processes.process_name
  - Endpoint.Processes.user
  - _time
  risk_score: 81
  security_domain: endpoint
type: TTP
version: 1
