{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Use Cases",
    "coa": {
        "data": {
            "description": "Published in response to CVE-2021-44228, this playbook and its sub-playbooks can be used to investigate and  respond to attacks against hosts running vulnerable Java applications which use log4j.",
            "edges": [
                {
                    "id": "port_0_to_port_15",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_19",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_22",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_23",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_24",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_19_to_port_25",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_25_to_port_20",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                }
            ],
            "hash": "78e9b912032aa57c87befaa5f816a31d048407ed",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 530,
                    "y": -7.815970093361102e-14
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 830,
                    "y": -7.815970093361102e-14
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "enumerate hosts",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "passthrough",
                            "repoName": "community"
                        },
                        "functionId": 5,
                        "functionName": "enumerate_hosts",
                        "id": "15",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "passthrough": {
                                "description": "Return the inputs as outputs. This is useful for publishing pieces of data for other blocks in the playbook to use.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_1",
                                        "name": "input_1",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_2",
                                        "name": "input_2",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_3",
                                        "name": "input_3",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_4",
                                        "name": "input_4",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_5",
                                        "name": "input_5",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_6",
                                        "name": "input_6",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_7",
                                        "name": "input_7",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_8",
                                        "name": "input_8",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_9",
                                        "name": "input_9",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "list",
                                        "label": "input_10",
                                        "name": "input_10",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "passthrough",
                                "name": "passthrough"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "passthrough": {
                                "input_1": "log4j_hosts",
                                "input_10": null,
                                "input_2": "",
                                "input_3": null,
                                "input_4": null,
                                "input_5": null,
                                "input_6": null,
                                "input_7": null,
                                "input_8": null,
                                "input_9": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "15",
                    "type": "utility",
                    "userCode": "\n    # use custom code to read a custom list of potential log4j hosts and/or ip addresses\n    # and make a json to create an artifact for each one.\n    # the expected format of the custom list is:\n    #     hostname1 | unix\n    #     1.1.1.1   | windows\n    \n    # TODO remove this testing piece which deletes existing artifacts\n    container_artifact_data = phantom.collect2(container=container, datapath=[\"artifact:*.id\",\"artifact:*.id\"])\n    container_artifact_header_item_0 = [item[0] for item in container_artifact_data]\n    for artifact_id in container_artifact_header_item_0:\n        phantom.delete_artifact(artifact_id=artifact_id)\n    \n    \n    # TODO: bring in a test splunk notable and clean up the fields in that as well\n\n    custom_list_name = parameters[0]['input_1']\n    \n    success, message, rows = phantom.get_list(list_name=custom_list_name)\n    \n    # loop through the rows and create a list of artifact jsons to add\n    # the two columns are expected to be the ip_or_hostname and the operating system family\n    parameters = []\n    unix_hosts = []\n    windows_hosts = []\n    unknown_hosts = []\n    for row in rows:\n        if row[0]:\n            if row[1] != 'unix' and row[1] != 'windows':\n                os_family = 'unknown'\n            else:\n                os_family = row[1]\n            \n            parameters.append({'input_1': {'cef_data': {'deviceHostname': row[0], 'operatingSystemFamily': os_family}}})\n            \n\n",
                    "x": 510,
                    "y": 152
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "create artifacts",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_create",
                            "repoName": "community"
                        },
                        "functionId": 9,
                        "functionName": "create_artifacts",
                        "id": "19",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_create": {
                                "description": "Create a new artifact with the specified attributes.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container which the artifact will be added to.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the new artifact, which is optional and defaults to \"artifact\".",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The label of the new artifact, which is optional and defaults to \"events\"",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "The severity of the new artifact, which is optional and defaults to \"Medium\". Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the created artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either \"true\" or \"false\", depending on whether or not the new artifact should trigger the execution of any playbooks that are set to active on the label of the container the artifact will be added to. Optional and defaults to \"false\".",
                                        "inputType": "item",
                                        "label": "run_automation",
                                        "name": "run_automation",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_create",
                                "name": "artifact_create"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_create": {
                                "cef_data_type": null,
                                "cef_field": null,
                                "cef_value": null,
                                "container": "container:id",
                                "input_json": "enumerate_hosts:custom_function_result.data.*.item",
                                "label": null,
                                "name": "Potential log4j Host",
                                "run_automation": null,
                                "severity": "high",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "19",
                    "type": "utility",
                    "userCode": "\n",
                    "x": 510,
                    "y": 304
                },
                "20": {
                    "data": {
                        "advanced": {
                            "customName": "os filter",
                            "customNameId": 0,
                            "description": "The operatingSystemFamily should be either unix, windows, or unknown. If it is unknown, both sets of playbooks should be called.",
                            "join": [],
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.operatingSystemFamily",
                                        "value": "unix"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.cef.operatingSystemFamily",
                                        "value": "unknown"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "unix_or_unknown",
                                "logic": "or"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "artifact:*.cef.operatingSystemFamily",
                                        "value": "windows"
                                    },
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "artifact:*.cef.operatingSystemFamily",
                                        "value": "unknown"
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "windows_or_unknown",
                                "logic": "or"
                            }
                        ],
                        "customDatapaths": {
                            "artifacts": {
                                "artifact:*.cef.operatingSystemFamily": {
                                    "contains": [],
                                    "isCustomDatapath": true,
                                    "label": "artifact:*.cef.operatingSystemFamily",
                                    "value": "artifact:*.cef.operatingSystemFamily"
                                }
                            }
                        },
                        "functionId": 1,
                        "functionName": "os_filter",
                        "id": "20",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "filter",
                    "x": 570,
                    "y": 625
                },
                "21": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "playbook_internal_host_ssh_investigate_2",
                        "id": "21",
                        "inputs": {
                            "ip_or_hostname": {
                                "datapaths": [
                                    "filtered-data:os_filter:condition_1:artifact:*.cef.deviceHostname"
                                ],
                                "deduplicate": true
                            }
                        },
                        "playbookName": "internal_host_ssh_investigate",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "playbook",
                    "x": 340,
                    "y": 805
                },
                "22": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "playbook_internal_host_ssh_log4j_investigate_2",
                        "id": "22",
                        "inputs": {
                            "ip_or_hostname": {
                                "datapaths": [
                                    "filtered-data:os_filter:condition_1:artifact:*.cef.deviceHostname"
                                ],
                                "deduplicate": true
                            }
                        },
                        "playbookName": "internal_host_ssh_log4j_investigate",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "playbook",
                    "x": 0,
                    "y": 805
                },
                "23": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "playbook_internal_host_winrm_investigate_2",
                        "id": "23",
                        "inputs": {
                            "ip_or_hostname": {
                                "datapaths": [
                                    "filtered-data:os_filter:condition_2:artifact:*.cef.deviceHostname"
                                ],
                                "deduplicate": true
                            }
                        },
                        "playbookName": "internal_host_winrm_investigate",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "playbook",
                    "x": 680,
                    "y": 805
                },
                "24": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "playbook_internal_host_winrm_log4j_investigate_2",
                        "id": "24",
                        "inputs": {
                            "ip_or_hostname": {
                                "datapaths": [
                                    "filtered-data:os_filter:condition_2:artifact:*.cef.deviceHostname"
                                ],
                                "deduplicate": true
                            }
                        },
                        "playbookName": "internal_host_winrm_log4j_investigate",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "playbook",
                    "x": 1020,
                    "y": 805
                },
                "25": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "playbook_internal_host_splunk_investigate_log4j_1",
                        "id": "25",
                        "inputs": {
                            "ip_or_hostname": {
                                "datapaths": [
                                    "artifact:*.cef.deviceHostname"
                                ],
                                "deduplicate": true
                            }
                        },
                        "playbookName": "internal_host_splunk_investigate_log4j",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "playbook",
                    "x": 520,
                    "y": 404.5
                }
            },
            "notes": "TODO: bring in a test splunk notable and add a host from that to the custom list in enumerate_hosts\n\n\n* In the block called \"fetch_hosts_from_custom_list\", change the custom list name from \"log4j_hosts\" if needed \n* If the operating system family (\"windows\" or \"unix\") is not known, both ssh and winrm will be attempted\n* If ssh and/or winrm are not the preferred endpoint management methods, these playbooks could be ported to use Google's GRR, osquery,  CrowdStrike's RTR, Carbon Black's EDR API, or similar tools.\n\n* The artifact scope \"all\" is used throughout this playbook because the artifact list can be added to as the playbook progresses."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.4",
        "version": "5.1.0.70187"
    },
    "create_time": "2021-12-14T20:29:14.791691+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}