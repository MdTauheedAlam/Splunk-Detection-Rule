name: Detect Dump LSASS Memory using comsvcs
id: 76bb9e35-f314-4c3d-a385-83c72a13ce4e
version: 2
description: The following analytic identifies credential dumping using comsvcs.dll
  with `regsvr32.exe`. This technique is common with adversaries who would like to
  dump the memory of lsass.exe and perform offline password cracking.
search: '| from read_ssa_enriched_events() | eval dest_device_id=ucast(map_get(input_event,
  "dest_device_id"), "string", null), process_name=lower(ucast(map_get(input_event,
  "process_name"), "string", null)), _time=parse_long(ucast(map_get(input_event, "_time"),
  "string", null)), process=lower(ucast(map_get(input_event, "process"), "string",
  null)), event_id=ucast(map_get(input_event, "event_id"), "string", null), dest_user_id=ucast(map_get(input_event,
  "dest_user_id"), "string", null), dest_device_id=ucast(map_get(input_event, "dest_device_id"),
  "string", null) | where process IS NOT NULL AND process_name IS NOT NULL AND process_name
  LIKE "%rundll32.exe%" AND match_regex(process, /(?i)comsvcs.dll[,\s]+MiniDump/)=true
  | eval body=create_map("category_id", 101, "class_id", 101000, "detection_start_time", start_time, 
  "detection_end_time", end_time, "device_entities", [create_map("uid", ucast(map_get(input_event, "enrichments.device_entities.device.uid"), "string", null), "type_id", 0)], 
  "disposition_id", 1, "end_time", end_time, "event_id", 10100001, "event_time", timestamp, 
  "finding", create_map("confidence", 100, "confidence_id", 3, 
  "context_ids", [11, 10, 46], "impact", 70, "impact_id", 4,
  "kill_chain_phase", Actions on Objectives, "kill_chain_phase_id", 7, 
  "risk_level", High, "risk_level_id", 3, "type_id", 1, "ref_event_uid", event_id), 
  "message", A dump of lsass.exe was attempted using comsvcs.dll on endpoint $dest_device_id$ by user $dest_device_user$., "metadata", create_map("log_name", Endpoint_Processes, "version",
  "1.0.0"), "observables", , "origin", create_map("product", create_map("name", "Splunk Behavioral Analytics")), 
  "rule", create_map("name", "Detect Dump LSASS Memory using comsvcs", "uid", "76bb9e35-f314-4c3d-a385-83c72a13ce4e", "version", "1"), "start_time", start_time, "time", start_time,
  "user_entities", [create_map("uid", ucast(map_get(input_event, "enrichments.user_entities.user.uid"),"string", null))]) | into write_ssa_finding_events();'
how_to_implement: You must be ingesting endpoint data that tracks process activity,
  including Windows command line logging. You can see how we test this with [Event
  Code 4688](https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4688a)
  on the [attack_range](https://github.com/splunk/attack_range/blob/develop/ansible/roles/windows_common/tasks/windows-enable-4688-cmd-line-audit.yml).
known_false_positives: False positives should be limited, filter as needed.
references:
- https://2017.zeronights.org/wp-content/uploads/materials/ZN17_Kheirkhabarov_Hunting_for_Credentials_Dumping_in_Windows_Environment.pdf
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md#atomic-test-3---dump-lsassexe-memory-using-comsvcsdll
tags:
  analytic_story:
  - Credential Dumping
  cis20:
  - CIS 8
  - CIS 16
  kill_chain_phases:
  - Actions on Objectives
  mitre_attack_id:
  - T1003.003
  - T1003
  nist:
  - DE.CM
  required_fields:
  - process_name
  - _tenant
  - _time
  - dest_device_id
  - process
  risk_score: 70
  security_domain: endpoint
  risk_severity: medium
test:
  name: Detect Dump LSASS Memory using comsvcs Unit Test
  tests:
  - name: Detect Dump LSASS Memory using comsvcs
    file: endpoint/ssa___detect_dump_lsass_memory_using_comsvcs.yml
    pass_condition: '@count_gt(0)'
    attack_data:
    - file_name: windows-security.log
      data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1003.001/atomic_red_team/windows-security.log
      source: WinEventLog:Security
